import yfinance as yf
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
from sklearn.model_selection import train_test_split

# Step 1: Download stock data
ticker = "AAPL"  # You can change this to any stock, like 'GOOGL', 'MSFT'
data = yf.download(ticker, start="2015-01-01", end="2024-01-01")

# Step 2: Prepare data
data = data[['Close']]
data.dropna(inplace=True)
data['Prediction'] = data[['Close']].shift(-30)  # Predict 30 days into the future

# Step 3: Feature & target
X = np.array(data.drop(['Prediction'], axis=1))[:-30]
y = np.array(data['Prediction'])[:-30]

# Step 4: Train/Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Model training
lr = LinearRegression()
lr.fit(X_train, y_train)

# Step 6: Model evaluation
predictions = lr.predict(X_test)
rmse = np.sqrt(mean_squared_error(y_test, predictions))
r2 = r2_score(y_test, predictions)

print(f"Root Mean Squared Error: {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Step 7: Predict future prices
X_future = np.array(data.drop(['Prediction'], axis=1))[-30:]
future_prediction = lr.predict(X_future)

# Step 8: Plot
plt.figure(figsize=(12,6))
plt.title(f"{ticker} Stock Price Prediction (Linear Regression)")
plt.plot(data['Close'], label="Actual Price")
plt.plot(range(len(data)-30, len(data)), future_prediction, label="Predicted Next 30 Days", linestyle='--')
plt.xlabel("Days")
plt.ylabel("Price (USD)")
plt.legend()
plt.grid(True)
plt.tight_layout()
plt.show()
